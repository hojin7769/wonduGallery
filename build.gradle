//추가
buildscript {
    ext {
        querydslVersion = '5.0.0'
    }
}
plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
    // Spring Cloud Starter AWS
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'org.mapstruct:mapstruct:1.4.1.Final'
    implementation 'software.amazon.awssdk:s3:2.16.100'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: '3.0.4'
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.8'
// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.3'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    // https://mvnrepository.com/artifact/org.apache.poi/poi
    implementation 'org.apache.poi:poi:5.2.2'
    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    implementation 'org.apache.poi:poi-ooxml:5.2.2'
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.8.9'

    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.11.0'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    // queryDSL 설정
    //querydsl 설정 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    /** TEST */
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
//    testImplementation 'org.testcontainers:mysql'
}

// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [generated]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

bootWar {
    archivesBaseName = "ROOT"
    archiveFileName = "ROOT.war"
    archiveVersion = "0.0.0"
}


//tasks.withType(Test).configureEach  {
//
//    jvmArgs += ["-Djasypt.encryptor.password=${providers.gradleProperty("jasypt.encryptor.password").get()}"
//            , "-Djasypt.encryptor.algorithm=${providers.gradleProperty("jasypt.encryptor.algorithm").get()}"
//    ]
//    useJUnitPlatform()
//    systemProperty 'jasypt.encryptor.password', findProperty("jasypt.password")
//    systemProperty 'jasypt.encryptor.algorithm', findProperty("jasypt.algorithm")
//    testLogging {
//        exceptionFormat "full"
//        events "started", "skipped", "passed", "failed"
//        showStandardStreams true
//    }
//}

//tasks.withType(Test) {
//    useJUnitPlatform()
//    testLogging {
//        exceptionFormat "full"
//        events "started", "skipped", "passed", "failed"
//        showStandardStreams true
//    }
//}

tasks.named('test') {
    jvmArgs += ["-Djasypt.encryptor.password=${providers.gradleProperty("jasypt.encryptor.password").get()}"
                , "-Djasypt.encryptor.algorithm=${providers.gradleProperty("jasypt.encryptor.algorithm").get()}"
    ]
    systemProperty 'jasypt.encryptor.password', findProperty("jasypt.password")
    systemProperty 'jasypt.encryptor.algorithm', findProperty("jasypt.algorithm")
    useJUnitPlatform()
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}

//test {
//    jvmArgs += ["-Djasypt.encryptor.password=${providers.gradleProperty("jasypt.encryptor.password").get()}"
//                , "-Djasypt.encryptor.algorithm=${providers.gradleProperty("jasypt.encryptor.algorithm").get()}"
//    ]
//
//    useJUnitPlatform()
//    systemProperty 'jasypt.encryptor.password', findProperty("jasypt.password")
//    systemProperty 'jasypt.encryptor.algorithm', findProperty("jasypt.algorithm")
//    testLogging {
//        exceptionFormat "full"
//        events "started", "skipped", "passed", "failed"
//        showStandardStreams true
//    }
//}