<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<included>-->

<!--    &lt;!&ndash; LOG 홈 설정 &ndash;&gt;-->
<!--    <property name="LOG_DIR" value="./log"/>-->

<!--    <property name="CHARSET" value="UTF-8" />-->

<!--    &lt;!&ndash; 표준 LOG 패턴 &ndash;&gt;-->
<!--    <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{35} [%file:%line] -%msg%n"/>-->

<!--    &lt;!&ndash; 표준 LOG 패턴 &ndash;&gt;-->
<!--    <property name="API_LOG_PATTERN" value="[%-5level] : #%X{requestUID} #%X{requestUserAgent} #START:%X{requestStartTime} #%X{methodName} #%X{methodArgs} #%X{methodReturn}%n"/>-->
<!--    &lt;!&ndash; 표준 SQL 로그 패턴 &ndash;&gt;-->
<!--    <property name="SQL_LOG_PATTERN" value="[%-5level] : #%X{requestUID} #%X{requestUserAgent} %msg%n"/>-->

<!--    <timestamp key="FILE_NAME_BY_SECOND" datePattern="yyyyMMdd 'T' HHmmss " />-->

<!--    &lt;!&ndash; 로그 꾸미는 용도 &ndash;&gt;-->
<!--    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />-->
<!--    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />-->
<!--    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />-->


<!--    &lt;!&ndash; APPENDER : 로그를 출력 할 위치, 출력 형식 등을 설정 &ndash;&gt;-->
<!--    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">-->
<!--        &lt;!&ndash; encoders are assigned the type-->
<!--             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default &ndash;&gt;-->
<!--        <withJansi>true</withJansi>-->
<!--        <encoder>-->
<!--            <charset>${CHARSET}</charset>-->
<!--            <pattern>%clr([%-5level]){cyan} : %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){grey} %msg%n</pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

<!--    &lt;!&ndash; APPENDER : 로그를 출력 할 위치, 출력 형식 등을 설정 &ndash;&gt;-->
<!--    <appender name="API_STDOUT" class="ch.qos.logback.core.ConsoleAppender">-->
<!--        &lt;!&ndash; encoders are assigned the type-->
<!--             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default &ndash;&gt;-->
<!--        <withJansi>true</withJansi>-->
<!--        <encoder>-->
<!--            <charset>${CHARSET}</charset>-->
<!--            <pattern>${API_LOG_PATTERN}</pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

<!--    &lt;!&ndash; APPENDER : 로그를 출력 할 위치, 출력 형식 등을 설정 &ndash;&gt;-->
<!--    <appender name="SQL_STDOUT" class="ch.qos.logback.core.ConsoleAppender">-->
<!--        &lt;!&ndash; encoders are assigned the type-->
<!--             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default &ndash;&gt;-->
<!--        <withJansi>true</withJansi>-->
<!--        <encoder>-->
<!--            <charset>${CHARSET}</charset>-->
<!--            <pattern>${SQL_LOG_PATTERN}</pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

<!--    &lt;!&ndash; Request Log &ndash;&gt;-->
<!--    <appender name="REQUEST_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        <file>${LOG_DIR}/api/api.log</file>-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            &lt;!&ndash; daily rollover &ndash;&gt;-->
<!--            <fileNamePattern>api.%d{yyyy-MM-dd}.log</fileNamePattern>-->

<!--            <maxHistory>3</maxHistory>-->
<!--            <totalSizeCap>100MB</totalSizeCap>-->

<!--        </rollingPolicy>-->
<!--        <encoder>-->
<!--            <charset>${CHARSET}</charset>-->
<!--            <pattern>${API_LOG_PATTERN}</pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

<!--    &lt;!&ndash; 일반적인 FILE APPENDER &ndash;&gt;-->
<!--    <appender name="DOMAIN_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        <file>${LOG_DIR}/domain/domain.log</file>-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            &lt;!&ndash; daily rollover &ndash;&gt;-->
<!--            <fileNamePattern>domain.%d{yyyy-MM-dd}.log</fileNamePattern>-->

<!--            <maxHistory>3</maxHistory>-->
<!--            <totalSizeCap>100MB</totalSizeCap>-->

<!--        </rollingPolicy>-->

<!--        <encoder>-->
<!--            <charset>${CHARSET}</charset>-->
<!--            <pattern>[%-5level] [%d{HH:mm:ss.SSS}] at %C %X{requestUUID} : param[#%X{parameter}] %n return[#%X{return}]%n</pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

<!--    <appender name="SQL_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        <file>${LOG_DIR}/sql/sql.log</file>-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            &lt;!&ndash; daily rollover &ndash;&gt;-->
<!--            <fileNamePattern>sql.%d{yyyy-MM-dd}.log</fileNamePattern>-->

<!--            <maxHistory>3</maxHistory>-->
<!--            <totalSizeCap>100MB</totalSizeCap>-->
<!--        </rollingPolicy>-->

<!--        <encoder>-->
<!--            <charset>${CHARSET}</charset>-->
<!--            <pattern>${SQL_LOG_PATTERN}</pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

<!--    &lt;!&ndash; ERROR LOG &ndash;&gt;-->
<!--    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">-->

<!--        &lt;!&ndash; root에서 사용하기 위해 filter를 추가 &ndash;&gt;-->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            <level>ERROR</level>-->
<!--            <onMatch>ACCEPT</onMatch>-->
<!--            <onMismatch>DENY</onMismatch>-->
<!--        </filter>-->

<!--        <file>${LOG_DIR}/error/error.log</file>-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            <fileNamePattern>error.%d{yyyy-MM-dd}.log</fileNamePattern>-->

<!--            <maxHistory>3</maxHistory>-->
<!--            <totalSizeCap>100MB</totalSizeCap>-->
<!--        </rollingPolicy>-->

<!--        <encoder>-->
<!--            <charset>${CHARSET}</charset>-->
<!--            <pattern>%d{HH:mm:ss.SSS} [%thread]  %-5level %logger{35} %X{requestUUID}:%X{requestURL} [%file:%line] -%msg%n</pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

<!--    &lt;!&ndash; 커스텀 로그 설정 &ndash;&gt;-->
<!--    <logger name="domainLog" level="info" additivity="false">-->
<!--        <appender-ref ref="DOMAIN_LOG" />-->
<!--    </logger>-->

<!--    &lt;!&ndash; ERROR LOG&ndash;&gt;-->
<!--    <logger name="ERROR" level="ERROR" additivity="false">-->
<!--        <appender-ref ref="ERROR" />-->
<!--    </logger>-->

<!--    &lt;!&ndash; Root : 모든 Error 로그를 수집 &ndash;&gt;-->
<!--    <root level="info">-->
<!--        <appender-ref ref="STDOUT" />-->
<!--        <appender-ref ref="ERROR" />-->
<!--    </root>-->

<!--    &lt;!&ndash; WEB LOG &ndash;&gt;-->
<!--    <logger name="API_LOG" level="TRACE" additivity="false">-->
<!--        <appender-ref ref="API_STDOUT" />-->
<!--        <appender-ref ref="REQUEST_LOG" />-->
<!--    </logger>-->

<!--    &lt;!&ndash; SQL LOG : hibernate &ndash;&gt;-->
<!--    <logger name="org.hibernate.SQL" level="TRACE">-->
<!--        <appender-ref ref="SQL_STDOUT"/>-->
<!--        <appender-ref ref="SQL_LOG"/>-->
<!--    </logger>-->

<!--</included>-->